import os
import time
import json
from loguru import logger
from typing import Optional, Dict, Any, List

from src.utils.constants import DEFAULT_EXTENSIONS_PATH, METAMASK_ID
from src.chrome.playwright_chrome import PlaywrightChrome


class MetamaskImport:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞ MetaMask —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Playwright
    """
    
    def __init__(self, profile_name: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ MetaMask
        
        Args:
            profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è Chrome
        """
        self.profile_name = profile_name
        self.chrome = PlaywrightChrome()
        self.page = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MetaMask
        config_path = os.path.join(os.path.dirname(__file__), "..", "chrome", "config", "metamask_config.json")
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                self.config = json.load(f)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.config = {
                "selectors": {
                    "import_wallet_button": "button:has-text('Import wallet')",
                    "i_agree_button": "button:has-text('I agree')",
                    "import_with_seed_phrase": "button:has-text('Import an existing wallet')",
                    "seed_phrase_input": "textarea[placeholder='Paste Secret Recovery Phrase from clipboard']",
                    "password_input": "input[type='password']",
                    "confirm_password_input": "input[autocomplete='new-password']:nth-child(2)",
                    "terms_checkbox": "input[type='checkbox']",
                    "import_button": "button:has-text('Import')",
                    "all_done_button": "button:has-text('All Done')",
                    "got_it_button": "button:has-text('Got it')",
                    "close_popup_button": "button:has-text('Close')",
                    "next_button": "button:has-text('Next')",
                    "skip_button": "button:has-text('Skip')",
                    "networks_button": "button[data-testid='network-display']",
                    "add_network_button": "button:has-text('Add network')",
                    "add_network_manually": "button:has-text('Add a network manually')",
                    "network_name_input": "input[id='network-name']",
                    "rpc_url_input": "input[id='rpc-url']",
                    "chain_id_input": "input[id='chainId']",
                    "currency_symbol_input": "input[id='currency-symbol']",
                    "block_explorer_input": "input[id='block-explorer-url']",
                    "save_network_button": "button:has-text('Save')",
                    "close_all_button": "button[aria-label='Close']"
                },
                "timeouts": {
                    "navigation": 60000,
                    "element": 30000,
                    "action": 5000
                }
            }
    
    async def import_wallet(self, seed_phrase: str, password: str) -> bool:
        """
        –ò–º–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞ MetaMask —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º seed phrase
        
        Args:
            seed_phrase: Seed phrase (–º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞) –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
            password: –ü–∞—Ä–æ–ª—å –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º Chrome —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
            if not self.chrome.launch_profile(self.profile_name):
                logger.error(f"‚õî {self.profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
                return False
            
            self.page = self.chrome.page
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º MetaMask
            logger.info(f"ü¶ä {self.profile_name} - –æ—Ç–∫—Ä—ã–≤–∞–µ–º MetaMask...")
            await self.page.goto(f"chrome-extension://{METAMASK_ID}/home.html")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª–µ–∫
            try:
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
                import_wallet_button = await self.page.wait_for_selector(
                    self.config["selectors"]["import_wallet_button"],
                    timeout=self.config["timeouts"]["element"]
                )
                
                if import_wallet_button:
                    logger.info(f"ü¶ä {self.profile_name} - –Ω–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞...")
                    await import_wallet_button.click()
                    
                    # –°–æ–≥–ª–∞—à–∞–µ–º—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏
                    i_agree_button = await self.page.wait_for_selector(
                        self.config["selectors"]["i_agree_button"],
                        timeout=self.config["timeouts"]["element"]
                    )
                    await i_agree_button.click()
                    
                    # –í—ã–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç —Å –ø–æ–º–æ—â—å—é seed phrase
                    import_with_seed_phrase = await self.page.wait_for_selector(
                        self.config["selectors"]["import_with_seed_phrase"],
                        timeout=self.config["timeouts"]["element"]
                    )
                    await import_with_seed_phrase.click()
                    
                    # –í–≤–æ–¥–∏–º seed phrase
                    seed_phrase_input = await self.page.wait_for_selector(
                        self.config["selectors"]["seed_phrase_input"],
                        timeout=self.config["timeouts"]["element"]
                    )
                    await seed_phrase_input.fill(seed_phrase)
                    
                    # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
                    password_input = await self.page.wait_for_selector(
                        self.config["selectors"]["password_input"],
                        timeout=self.config["timeouts"]["element"]
                    )
                    await password_input.fill(password)
                    
                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–∞—Ä–æ–ª—å
                    confirm_password_input = await self.page.wait_for_selector(
                        self.config["selectors"]["confirm_password_input"],
                        timeout=self.config["timeouts"]["element"]
                    )
                    await confirm_password_input.fill(password)
                    
                    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —É—Å–ª–æ–≤–∏—è
                    terms_checkbox = await self.page.wait_for_selector(
                        self.config["selectors"]["terms_checkbox"],
                        timeout=self.config["timeouts"]["element"]
                    )
                    await terms_checkbox.click()
                    
                    # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–º–ø–æ—Ä—Ç–∞
                    import_button = await self.page.wait_for_selector(
                        self.config["selectors"]["import_button"],
                        timeout=self.config["timeouts"]["element"]
                    )
                    await import_button.click()
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
                    all_done_button = await self.page.wait_for_selector(
                        self.config["selectors"]["all_done_button"],
                        timeout=self.config["timeouts"]["navigation"]
                    )
                    await all_done_button.click()
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    try:
                        got_it_button = await self.page.wait_for_selector(
                            self.config["selectors"]["got_it_button"],
                            timeout=self.config["timeouts"]["element"]
                        )
                        if got_it_button:
                            await got_it_button.click()
                    except:
                        pass
                    
                    try:
                        close_popup_button = await self.page.wait_for_selector(
                            self.config["selectors"]["close_popup_button"],
                            timeout=self.config["timeouts"]["element"]
                        )
                        if close_popup_button:
                            await close_popup_button.click()
                    except:
                        pass
                    
                    logger.success(f"‚úÖ {self.profile_name} - –∫–æ—à–µ–ª–µ–∫ MetaMask —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è {self.profile_name} - –∫–æ—à–µ–ª–µ–∫ MetaMask —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
                    return True
            except Exception as e:
                logger.error(f"‚õî {self.profile_name} - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∫–æ—à–µ–ª—å–∫–∞: {str(e)}")
                return False
        except Exception as e:
            logger.error(f"‚õî {self.profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª–µ–∫: {str(e)}")
            return False
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if self.chrome:
                self.chrome.close()
    
    async def add_network(self, network_config: Dict[str, Any]) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∏ –≤ MetaMask
        
        Args:
            network_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                {
                    "name": "–ò–º—è —Å–µ—Ç–∏",
                    "rpc_url": "URL RPC",
                    "chain_id": "ID —Ü–µ–ø–∏",
                    "currency_symbol": "–°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã",
                    "block_explorer_url": "URL –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—è –±–ª–æ–∫–æ–≤"
                }
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–µ—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º Chrome —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
            if not self.chrome.launch_profile(self.profile_name):
                logger.error(f"‚õî {self.profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
                return False
            
            self.page = self.chrome.page
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º MetaMask
            logger.info(f"ü¶ä {self.profile_name} - –æ—Ç–∫—Ä—ã–≤–∞–µ–º MetaMask...")
            await self.page.goto(f"chrome-extension://{METAMASK_ID}/home.html")
            
            # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–µ—Ç–µ–π
            networks_button = await self.page.wait_for_selector(
                self.config["selectors"]["networks_button"],
                timeout=self.config["timeouts"]["element"]
            )
            await networks_button.click()
            
            # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏
            add_network_button = await self.page.wait_for_selector(
                self.config["selectors"]["add_network_button"],
                timeout=self.config["timeouts"]["element"]
            )
            await add_network_button.click()
            
            # –í—ã–±–∏—Ä–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∏ –≤—Ä—É—á–Ω—É—é
            add_network_manually = await self.page.wait_for_selector(
                self.config["selectors"]["add_network_manually"],
                timeout=self.config["timeouts"]["element"]
            )
            await add_network_manually.click()
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ç–∏
            network_name_input = await self.page.wait_for_selector(
                self.config["selectors"]["network_name_input"],
                timeout=self.config["timeouts"]["element"]
            )
            await network_name_input.fill(network_config["name"])
            
            rpc_url_input = await self.page.wait_for_selector(
                self.config["selectors"]["rpc_url_input"],
                timeout=self.config["timeouts"]["element"]
            )
            await rpc_url_input.fill(network_config["rpc_url"])
            
            chain_id_input = await self.page.wait_for_selector(
                self.config["selectors"]["chain_id_input"],
                timeout=self.config["timeouts"]["element"]
            )
            await chain_id_input.fill(network_config["chain_id"])
            
            currency_symbol_input = await self.page.wait_for_selector(
                self.config["selectors"]["currency_symbol_input"],
                timeout=self.config["timeouts"]["element"]
            )
            await currency_symbol_input.fill(network_config["currency_symbol"])
            
            block_explorer_input = await self.page.wait_for_selector(
                self.config["selectors"]["block_explorer_input"],
                timeout=self.config["timeouts"]["element"]
            )
            await block_explorer_input.fill(network_config["block_explorer_url"])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ç—å
            save_network_button = await self.page.wait_for_selector(
                self.config["selectors"]["save_network_button"],
                timeout=self.config["timeouts"]["element"]
            )
            await save_network_button.click()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏
            try:
                close_all_button = await self.page.wait_for_selector(
                    self.config["selectors"]["close_all_button"],
                    timeout=self.config["timeouts"]["navigation"]
                )
                if close_all_button:
                    await close_all_button.click()
            except:
                pass
            
            logger.success(f"‚úÖ {self.profile_name} - —Å–µ—Ç—å {network_config['name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚õî {self.profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ç—å {network_config['name']}: {str(e)}")
            return False
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if self.chrome:
                self.chrome.close()
    
    async def add_networks(self, networks: List[Dict[str, Any]]) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ç–µ–π –≤ MetaMask
        
        Args:
            networks: –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–µ—Ç–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ –≤—Å–µ —Å–µ—Ç–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        success = True
        for network in networks:
            if not await self.add_network(network):
                success = False
        
        return success 