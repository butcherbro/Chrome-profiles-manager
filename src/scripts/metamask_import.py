#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ MetaMask –≤ –ø—Ä–æ—Ñ–∏–ª–∏ Chrome.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ Chrome Profile Manager.
"""

import os
import time
import json
from loguru import logger
from typing import Optional, Dict, Any, List
from playwright.sync_api import Page

from src.utils.constants import DEFAULT_EXTENSIONS_PATH, METAMASK_ID
from src.chrome.playwright_chrome import PlaywrightChrome
from src.utils.helpers import fix_profile_extensions_settings

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
DEFAULT_SEED_PHRASE = "spirit snap march purchase win flavor sniff bread muffin wreck will blue"
DEFAULT_PASSWORD = "1_HEROES"

class MetamaskImport:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞ MetaMask —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Playwright
    """
    
    def __init__(self, profile_name: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ MetaMask
        
        Args:
            profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è Chrome
        """
        self.profile_name = profile_name
        self.chrome = PlaywrightChrome()
        self.page = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MetaMask
        config_path = os.path.join(os.path.dirname(__file__), "..", "chrome", "config", "metamask_config.json")
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                self.config = json.load(f)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.config = {
                "selectors": {
                    "import_wallet_button": "button:has-text('Import wallet')",
                    "i_agree_button": "button:has-text('I agree')",
                    "import_with_seed_phrase": "button:has-text('Import an existing wallet')",
                    "seed_phrase_input": "textarea[placeholder='Paste Secret Recovery Phrase from clipboard']",
                    "password_input": "input[type='password']",
                    "confirm_password_input": "input[autocomplete='new-password']:nth-child(2)",
                    "terms_checkbox": "input[type='checkbox']",
                    "import_button": "button:has-text('Import')",
                    "all_done_button": "button:has-text('All Done')",
                    "got_it_button": "button:has-text('Got it')",
                    "close_popup_button": "button:has-text('Close')",
                    "next_button": "button:has-text('Next')",
                    "skip_button": "button:has-text('Skip')",
                    "networks_button": "button[data-testid='network-display']",
                    "add_network_button": "button:has-text('Add network')",
                    "add_network_manually": "button:has-text('Add a network manually')",
                    "network_name_input": "input[id='network-name']",
                    "rpc_url_input": "input[id='rpc-url']",
                    "chain_id_input": "input[id='chainId']",
                    "currency_symbol_input": "input[id='currency-symbol']",
                    "block_explorer_input": "input[id='block-explorer-url']",
                    "save_network_button": "button:has-text('Save')",
                    "close_all_button": "button[aria-label='Close']"
                },
                "timeouts": {
                    "navigation": 60000,
                    "element": 30000,
                    "action": 5000
                }
            }
    
    async def import_wallet(self, seed_phrase: str, password: str) -> bool:
        """
        –ò–º–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞ MetaMask —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º seed phrase
        
        Args:
            seed_phrase: Seed phrase (–º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞) –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
            password: –ü–∞—Ä–æ–ª—å –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º Chrome —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
            if not self.chrome.launch_profile(self.profile_name):
                logger.error(f"‚õî {self.profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
                return False
            
            self.page = self.chrome.page
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º MetaMask
            logger.info(f"ü¶ä {self.profile_name} - –æ—Ç–∫—Ä—ã–≤–∞–µ–º MetaMask...")
            await self.page.goto(f"chrome-extension://{METAMASK_ID}/home.html")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª–µ–∫
            try:
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
                import_wallet_button = await self.page.wait_for_selector(
                    self.config["selectors"]["import_wallet_button"],
                    timeout=self.config["timeouts"]["element"]
                )
                
                if import_wallet_button:
                    logger.info(f"ü¶ä {self.profile_name} - –Ω–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞...")
                    await import_wallet_button.click()
                    
                    # –°–æ–≥–ª–∞—à–∞–µ–º—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏
                    i_agree_button = await self.page.wait_for_selector(
                        self.config["selectors"]["i_agree_button"],
                        timeout=self.config["timeouts"]["element"]
                    )
                    await i_agree_button.click()
                    
                    # –í—ã–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç —Å –ø–æ–º–æ—â—å—é seed phrase
                    import_with_seed_phrase = await self.page.wait_for_selector(
                        self.config["selectors"]["import_with_seed_phrase"],
                        timeout=self.config["timeouts"]["element"]
                    )
                    await import_with_seed_phrase.click()
                    
                    # –í–≤–æ–¥–∏–º seed phrase
                    seed_phrase_input = await self.page.wait_for_selector(
                        self.config["selectors"]["seed_phrase_input"],
                        timeout=self.config["timeouts"]["element"]
                    )
                    await seed_phrase_input.fill(seed_phrase)
                    
                    # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
                    password_input = await self.page.wait_for_selector(
                        self.config["selectors"]["password_input"],
                        timeout=self.config["timeouts"]["element"]
                    )
                    await password_input.fill(password)
                    
                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–∞—Ä–æ–ª—å
                    confirm_password_input = await self.page.wait_for_selector(
                        self.config["selectors"]["confirm_password_input"],
                        timeout=self.config["timeouts"]["element"]
                    )
                    await confirm_password_input.fill(password)
                    
                    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —É—Å–ª–æ–≤–∏—è
                    terms_checkbox = await self.page.wait_for_selector(
                        self.config["selectors"]["terms_checkbox"],
                        timeout=self.config["timeouts"]["element"]
                    )
                    await terms_checkbox.click()
                    
                    # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–º–ø–æ—Ä—Ç–∞
                    import_button = await self.page.wait_for_selector(
                        self.config["selectors"]["import_button"],
                        timeout=self.config["timeouts"]["element"]
                    )
                    await import_button.click()
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
                    all_done_button = await self.page.wait_for_selector(
                        self.config["selectors"]["all_done_button"],
                        timeout=self.config["timeouts"]["navigation"]
                    )
                    await all_done_button.click()
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    try:
                        got_it_button = await self.page.wait_for_selector(
                            self.config["selectors"]["got_it_button"],
                            timeout=self.config["timeouts"]["element"]
                        )
                        if got_it_button:
                            await got_it_button.click()
                    except:
                        pass
                    
                    try:
                        close_popup_button = await self.page.wait_for_selector(
                            self.config["selectors"]["close_popup_button"],
                            timeout=self.config["timeouts"]["element"]
                        )
                        if close_popup_button:
                            await close_popup_button.click()
                    except:
                        pass
                    
                    logger.success(f"‚úÖ {self.profile_name} - –∫–æ—à–µ–ª–µ–∫ MetaMask —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è {self.profile_name} - –∫–æ—à–µ–ª–µ–∫ MetaMask —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
                    return True
            except Exception as e:
                logger.error(f"‚õî {self.profile_name} - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∫–æ—à–µ–ª—å–∫–∞: {str(e)}")
                return False
        except Exception as e:
            logger.error(f"‚õî {self.profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª–µ–∫: {str(e)}")
            return False
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if self.chrome:
                self.chrome.close()
    
    async def add_network(self, network_config: Dict[str, Any]) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∏ –≤ MetaMask
        
        Args:
            network_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                {
                    "name": "–ò–º—è —Å–µ—Ç–∏",
                    "rpc_url": "URL RPC",
                    "chain_id": "ID —Ü–µ–ø–∏",
                    "currency_symbol": "–°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã",
                    "block_explorer_url": "URL –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—è –±–ª–æ–∫–æ–≤"
                }
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–µ—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º Chrome —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
            if not self.chrome.launch_profile(self.profile_name):
                logger.error(f"‚õî {self.profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
                return False
            
            self.page = self.chrome.page
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º MetaMask
            logger.info(f"ü¶ä {self.profile_name} - –æ—Ç–∫—Ä—ã–≤–∞–µ–º MetaMask...")
            await self.page.goto(f"chrome-extension://{METAMASK_ID}/home.html")
            
            # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–µ—Ç–µ–π
            networks_button = await self.page.wait_for_selector(
                self.config["selectors"]["networks_button"],
                timeout=self.config["timeouts"]["element"]
            )
            await networks_button.click()
            
            # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏
            add_network_button = await self.page.wait_for_selector(
                self.config["selectors"]["add_network_button"],
                timeout=self.config["timeouts"]["element"]
            )
            await add_network_button.click()
            
            # –í—ã–±–∏—Ä–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∏ –≤—Ä—É—á–Ω—É—é
            add_network_manually = await self.page.wait_for_selector(
                self.config["selectors"]["add_network_manually"],
                timeout=self.config["timeouts"]["element"]
            )
            await add_network_manually.click()
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ç–∏
            network_name_input = await self.page.wait_for_selector(
                self.config["selectors"]["network_name_input"],
                timeout=self.config["timeouts"]["element"]
            )
            await network_name_input.fill(network_config["name"])
            
            rpc_url_input = await self.page.wait_for_selector(
                self.config["selectors"]["rpc_url_input"],
                timeout=self.config["timeouts"]["element"]
            )
            await rpc_url_input.fill(network_config["rpc_url"])
            
            chain_id_input = await self.page.wait_for_selector(
                self.config["selectors"]["chain_id_input"],
                timeout=self.config["timeouts"]["element"]
            )
            await chain_id_input.fill(network_config["chain_id"])
            
            currency_symbol_input = await self.page.wait_for_selector(
                self.config["selectors"]["currency_symbol_input"],
                timeout=self.config["timeouts"]["element"]
            )
            await currency_symbol_input.fill(network_config["currency_symbol"])
            
            block_explorer_input = await self.page.wait_for_selector(
                self.config["selectors"]["block_explorer_input"],
                timeout=self.config["timeouts"]["element"]
            )
            await block_explorer_input.fill(network_config["block_explorer_url"])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ç—å
            save_network_button = await self.page.wait_for_selector(
                self.config["selectors"]["save_network_button"],
                timeout=self.config["timeouts"]["element"]
            )
            await save_network_button.click()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏
            try:
                close_all_button = await self.page.wait_for_selector(
                    self.config["selectors"]["close_all_button"],
                    timeout=self.config["timeouts"]["navigation"]
                )
                if close_all_button:
                    await close_all_button.click()
            except:
                pass
            
            logger.success(f"‚úÖ {self.profile_name} - —Å–µ—Ç—å {network_config['name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚õî {self.profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ç—å {network_config['name']}: {str(e)}")
            return False
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if self.chrome:
                self.chrome.close()
    
    async def add_networks(self, networks: List[Dict[str, Any]]) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ç–µ–π –≤ MetaMask
        
        Args:
            networks: –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–µ—Ç–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ –≤—Å–µ —Å–µ—Ç–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        success = True
        for network in networks:
            if not await self.add_network(network):
                success = False
        
        return success 

def click_metamask_button(page: Page, button_text: str, screenshots_dir: str, profile_name: str) -> bool:
    """
    –ù–∞–¥–µ–∂–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ MetaMask —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    
    Args:
        page: –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Playwright
        button_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Done", "Next")
        screenshots_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞—Ç–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    logger.info(f"üñ±Ô∏è –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '{button_text}' —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏...")
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    screenshot_path = os.path.join(screenshots_dir, f"metamask_before_{button_text.lower()}_{profile_name}.png")
    page.screenshot(path=screenshot_path)
    logger.info(f"üì∏ –°–¥–µ–ª–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ {button_text}: {screenshot_path}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    try:
        html_content = page.content()
        html_path = os.path.join(screenshots_dir, f"metamask_before_{button_text.lower()}_html_{profile_name}.txt")
        with open(html_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        logger.info(f"üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {html_path}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä—É: {e}")
    
    # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –∫–ª–∏–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    try:
        logger.info(f"üîç –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –∫–ª–∏–∫ –ø–æ —Ç–µ–∫—Å—Ç—É '{button_text}'")
        text_element = page.locator(f"text={button_text}").first
        if text_element and text_element.is_visible(timeout=2000):
            text_element.click(force=True, timeout=5000)
            logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ '{button_text}' –Ω–∞–∂–∞—Ç–∞ –º–µ—Ç–æ–¥–æ–º 1")
            time.sleep(1)
            return True
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
    
    # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
    selectors = [
        f"button:has-text('{button_text}')",
        f"button.onboarding-{button_text.lower()}-button",
        f"button[data-testid='onboarding-{button_text.lower()}-button']",
        f"button[role='button']:has-text('{button_text}')",
        f"//button[contains(@class, 'onboarding-{button_text.lower()}-button')]",
        f"//button[contains(text(), '{button_text}')]",
        f"//button[text()='{button_text}']",
        f"//div[contains(@class, 'onboarding-{button_text.lower()}-button')]",
        f"//div[contains(@role, 'button') and contains(text(), '{button_text}')]",
        f"//div[contains(@class, 'mm-box') and contains(text(), '{button_text}')]",
        f"//button[contains(@class, 'mm-box')]",
        f"//button[contains(@class, 'mm-button')]",
        f"//button[contains(@class, 'mm-button-primary')]",
        f"//button[contains(@class, 'mm-text')]"
    ]
    
    for i, selector in enumerate(selectors):
        try:
            logger.info(f"üîç –ú–µ—Ç–æ–¥ 2.{i+1}: –ü–æ–∏—Å–∫ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
            button = page.locator(selector).first
            if button and button.is_visible(timeout=2000):
                button.click(force=True, timeout=5000)
                logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ '{button_text}' –Ω–∞–∂–∞—Ç–∞ –º–µ—Ç–æ–¥–æ–º 2.{i+1}")
                time.sleep(1)
                return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ 2.{i+1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
    
    # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
    try:
        logger.info(f"üîç –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞")
        all_buttons = page.locator("button, div[role='button']").all()
        logger.info(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(all_buttons)} –∫–Ω–æ–ø–æ–∫ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ä–æ–ª—å—é –∫–Ω–æ–ø–∫–∏")
        
        for i, button in enumerate(all_buttons):
            try:
                text = button.text_content().strip().lower()
                is_visible = button.is_visible()
                logger.info(f"‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ {i+1}: —Ç–µ–∫—Å—Ç='{text}', –≤–∏–¥–∏–º–∞={is_visible}")
                
                if button_text.lower() in text and is_visible:
                    button.click(force=True, timeout=5000)
                    logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ '{button_text}' –Ω–∞–∂–∞—Ç–∞ –º–µ—Ç–æ–¥–æ–º 3 (–∏–Ω–¥–µ–∫—Å {i+1})")
                    time.sleep(1)
                    return True
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–Ω–æ–ø–∫–∏ {i+1}: {e}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ 3 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
    
    # –ú–µ—Ç–æ–¥ 4: JavaScript –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å —Ç–µ–∫—Å—Ç–æ–º
    try:
        logger.info(f"üîç –ú–µ—Ç–æ–¥ 4: JavaScript –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å —Ç–µ–∫—Å—Ç–æ–º")
        result = page.evaluate(f"""
            () => {{
                // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º "{button_text}"
                const elements = Array.from(document.querySelectorAll('*'));
                const targetElements = elements.filter(el => 
                    el.textContent && 
                    el.textContent.toLowerCase().includes("{button_text.lower()}") && 
                    (window.getComputedStyle(el).display !== 'none') &&
                    (window.getComputedStyle(el).visibility !== 'hidden')
                );
                
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–ª—É–±–∏–Ω–µ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –º–µ–Ω—å—à–µ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é)
                targetElements.sort((a, b) => {{
                    let depthA = 0, depthB = 0;
                    let parent = a;
                    while (parent) {{
                        depthA++;
                        parent = parent.parentElement;
                    }}
                    parent = b;
                    while (parent) {{
                        depthB++;
                        parent = parent.parentElement;
                    }}
                    return depthA - depthB;
                }});
                
                // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–∏–¥–∏–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
                if (targetElements.length > 0) {{
                    console.log("–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º {button_text}:", targetElements[0]);
                    targetElements[0].click();
                    return true;
                }}
                return false;
            }}
        """)
        
        if result:
            logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ '{button_text}' –Ω–∞–∂–∞—Ç–∞ –º–µ—Ç–æ–¥–æ–º 4 (JavaScript)")
            time.sleep(1)
            return True
        else:
            logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ 4 –Ω–µ –Ω–∞—à–µ–ª —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º '{button_text}'")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ 4 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
    
    # –ú–µ—Ç–æ–¥ 5: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Tab –∏ Enter
    try:
        logger.info(f"üîç –ú–µ—Ç–æ–¥ 5: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Tab –∏ Enter")
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–∏–º–∞–µ–º Tab –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
        for i in range(10):
            page.keyboard.press("Tab")
            time.sleep(0.3)
            
            # –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ Tab –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ –Ω—É–∂–Ω–æ–π –∫–Ω–æ–ø–∫–µ
            focused_element = page.evaluate("""
                () => {
                    const activeElement = document.activeElement;
                    return activeElement ? activeElement.textContent : null;
                }
            """)
            
            logger.info(f"‚ÑπÔ∏è –§–æ–∫—É—Å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º: '{focused_element}'")
            
            if focused_element and button_text.lower() in str(focused_element).lower():
                page.keyboard.press("Enter")
                logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ '{button_text}' –Ω–∞–∂–∞—Ç–∞ –º–µ—Ç–æ–¥–æ–º 5 (Tab + Enter)")
                time.sleep(1)
                return True
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ—Å–ª–µ Tab, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–µ–º Enter
        page.keyboard.press("Enter")
        logger.info(f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ Enter (–º–µ—Ç–æ–¥ 5)")
        time.sleep(1)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ 5 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
    
    # –ú–µ—Ç–æ–¥ 6: –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Ü–µ–Ω—Ç—Ä–∞ —ç–∫—Ä–∞–Ω–∞
    try:
        logger.info(f"üîç –ú–µ—Ç–æ–¥ 6: –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Ü–µ–Ω—Ç—Ä–∞ —ç–∫—Ä–∞–Ω–∞")
        viewport_size = page.viewport_size
        if viewport_size:
            center_x = viewport_size["width"] // 2
            center_y = viewport_size["height"] // 2
            logger.info(f"‚ÑπÔ∏è –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {viewport_size}, —Ü–µ–Ω—Ç—Ä: ({center_x}, {center_y})")
            
            # –ö–ª–∏–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
            page.mouse.click(center_x, center_y)
            logger.info(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω –∫–ª–∏–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞ (–º–µ—Ç–æ–¥ 6)")
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            screenshot_path = os.path.join(screenshots_dir, f"metamask_after_center_click_{profile_name}.png")
            page.screenshot(path=screenshot_path)
            logger.info(f"üì∏ –°–¥–µ–ª–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É: {screenshot_path}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ 6 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
    
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '{button_text}' –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤")
    
    # –î–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
    screenshot_path = os.path.join(screenshots_dir, f"metamask_button_click_failed_{button_text.lower()}_{profile_name}.png")
    page.screenshot(path=screenshot_path)
    logger.info(f"üì∏ –°–¥–µ–ª–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É: {screenshot_path}")
    
    return False

def run_metamask_import(profile_name, script_data_path, page=None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–º–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞ MetaMask –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    
    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è
        script_data_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
        page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ Playwright (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
        
    Returns:
        bool: True –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞ MetaMask –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile_name}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    seed_phrase = DEFAULT_SEED_PHRASE
    password = DEFAULT_PASSWORD
    
    logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º seed-—Ñ—Ä–∞–∑—É: {seed_phrase[:10]}...")
    logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å: {password[:2]}******")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    screenshots_dir = os.path.join(script_data_path, "screenshots")
    os.makedirs(screenshots_dir, exist_ok=True)
    
    try:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ {profile_name}...")
        fix_profile_extensions_settings(profile_name)
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        logger.info("‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π...")
        time.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
        if not page:
            logger.error("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞")
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        context = page.context
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è MetaMask
        logger.info("ü¶ä –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è MetaMask...")
        metamask_page = context.new_page()
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è MetaMask")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º MetaMask —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º onboarding/welcome
        metamask_url = f"chrome-extension://{METAMASK_ID}/home.html#onboarding/welcome"
        logger.info(f"üîó –û—Ç–∫—Ä—ã–≤–∞–µ–º MetaMask –ø–æ URL: {metamask_url}")
        
        try:
            metamask_page.goto(metamask_url, timeout=30000)
            logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ MetaMask –æ—Ç–∫—Ä—ã—Ç–∞")
        except Exception as e:
            error_message = str(e)
            logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ MetaMask: {error_message}")
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏
            screenshot_path = os.path.join(screenshots_dir, f"metamask_error_general_{profile_name}.png")
            metamask_page.screenshot(path=screenshot_path)
            logger.info(f"üì∏ –°–¥–µ–ª–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏: {screenshot_path}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É MetaMask
            metamask_page.close()
            return False
            
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        screenshot_path = os.path.join(screenshots_dir, f"metamask_welcome_{profile_name}.png")
        metamask_page.screenshot(path=screenshot_path)
        logger.info(f"üì∏ –°–¥–µ–ª–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {screenshot_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        metamask_page.wait_for_load_state("networkidle", timeout=10000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–µ–∫–±–æ–∫—Å–∞ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        checkbox = metamask_page.locator('label[class="onboarding__terms-label"]')
        if checkbox.is_visible(timeout=5000):
            logger.info("‚úÖ –ß–µ–∫–±–æ–∫—Å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω")
            
            # –ö–ª–∏–∫–∞–µ–º –Ω–∞ —á–µ–∫–±–æ–∫—Å
            logger.info("üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –Ω–∞ —á–µ–∫–±–æ–∫—Å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...")
            checkbox.click()
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
            import_button = metamask_page.locator("//button[contains(@data-testid,'onboarding-import-wallet')]")
            if import_button.is_visible(timeout=5000):
                logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞")
                
                # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–º–ø–æ—Ä—Ç–∞
                logger.info("üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–º–ø–æ—Ä—Ç–∞...")
                import_button.click()
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 5 —Å–µ–∫—É–Ω–¥
                logger.info("‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–º–ø–æ—Ä—Ç–∞...")
                time.sleep(5)
                
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                screenshot_path = os.path.join(screenshots_dir, f"metamask_after_import_click_{profile_name}.png")
                metamask_page.screenshot(path=screenshot_path)
                logger.info(f"üì∏ –°–¥–µ–ª–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {screenshot_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                current_url = metamask_page.url
                logger.info(f"üîç –¢–µ–∫—É—â–∏–π URL: {current_url}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∫—Ä—ã–ª–∞—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ URL
                if "import-with-recovery-phrase" in current_url:
                    logger.success("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ URL)")
                    
                    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–º–ø–æ—Ä—Ç–∞
                    screenshot_path = os.path.join(screenshots_dir, f"metamask_import_{profile_name}.png")
                    metamask_page.screenshot(path=screenshot_path)
                    logger.info(f"üì∏ –°–¥–µ–ª–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–º–ø–æ—Ä—Ç–∞: {screenshot_path}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞
                    seed_phrase_textarea = metamask_page.locator('textarea[data-testid="import-srp-text"]')
                    if seed_phrase_textarea.is_visible(timeout=5000):
                        logger.success("‚úÖ –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ seed-—Ñ—Ä–∞–∑—ã –Ω–∞–π–¥–µ–Ω–æ")
                        
                        # –í–≤–æ–¥–∏–º seed-—Ñ—Ä–∞–∑—É
                        logger.info("üîë –í–≤–æ–¥–∏–º seed-—Ñ—Ä–∞–∑—É...")
                        seed_phrase_textarea.fill(seed_phrase)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
                        password_inputs = metamask_page.locator('input[type="password"]')
                        if password_inputs.count() >= 2:
                            logger.success("‚úÖ –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã")
                            
                            # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
                            logger.info("üîë –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å...")
                            password_inputs.nth(0).fill(password)
                            
                            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–∞—Ä–æ–ª—å
                            logger.info("üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–∞—Ä–æ–ª—å...")
                            password_inputs.nth(1).fill(password)
                            
                            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                            terms_checkbox = metamask_page.locator('input[type="checkbox"]')
                            if terms_checkbox.is_visible(timeout=5000):
                                logger.info("‚úÖ –ß–µ–∫–±–æ–∫—Å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω")
                                terms_checkbox.check()
                                
                                # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–º–ø–æ—Ä—Ç–∞
                                import_final_button = metamask_page.locator('button:has-text("Import")')
                                if import_final_button.is_visible(timeout=5000):
                                    import_final_button.click()
                                    logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞–∂–∞—Ç–∞")
                                    
                                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
                                    time.sleep(5)
                                    
                                    # –ù–∞–∂–∏–º–∞–µ–º "All Done"
                                    all_done_button = metamask_page.locator("button:has-text('All Done')")
                                    if all_done_button.is_visible(timeout=10000):
                                        all_done_button.click()
                                        logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ 'All Done' –Ω–∞–∂–∞—Ç–∞")
                                    
                                    logger.success(f"‚úÖ {profile_name} - –∫–æ—à–µ–ª–µ–∫ MetaMask —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
                                    
                                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É MetaMask
                                    metamask_page.close()
                                    return True
                                else:
                                    logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                            else:
                                logger.error("‚ùå –ß–µ–∫–±–æ–∫—Å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        else:
                            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è")
                    else:
                        logger.error("‚ùå –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ seed-—Ñ—Ä–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–º–ø–æ—Ä—Ç–∞")
            else:
                logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            logger.error("‚ùå –ß–µ–∫–±–æ–∫—Å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—à–µ–ª–µ–∫ —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
            account_menu = metamask_page.locator('[data-testid="account-menu-icon"]')
            if account_menu.is_visible(timeout=2000):
                logger.info("‚úì MetaMask —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                screenshot_path = os.path.join(screenshots_dir, f"metamask_main_{profile_name}.png")
                metamask_page.screenshot(path=screenshot_path)
                logger.info(f"üì∏ –°–¥–µ–ª–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {screenshot_path}")
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É MetaMask
                metamask_page.close()
                return True
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                unlock_title = metamask_page.get_by_text("Welcome Back!")
                if unlock_title.is_visible(timeout=2000):
                    logger.info("‚úì MetaMask —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
                    
                    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    screenshot_path = os.path.join(screenshots_dir, f"metamask_unlock_{profile_name}.png")
                    metamask_page.screenshot(path=screenshot_path)
                    logger.info(f"üì∏ –°–¥–µ–ª–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {screenshot_path}")
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É MetaMask
                    metamask_page.close()
                    return False
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ MetaMask")
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É MetaMask
                    metamask_page.close()
                    return False
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∫–æ—à–µ–ª—å–∫–∞ MetaMask: {str(e)}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∑–∞–ø—É—Å–∫–∞
def register_script(pw):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ MetaMask –≤ —Å–∏—Å—Ç–µ–º–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
    
    Args:
        pw: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ PlaywrightChrome
    """
    pw.scripts["metamask_import"] = {
        "human_name": "–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ MetaMask",
        "method": run_metamask_import
    } 