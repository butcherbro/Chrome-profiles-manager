#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ Rabby Wallet –≤ –ø—Ä–æ—Ñ–∏–ª–∏ Chrome —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Playwright.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–º–ø–æ—Ä—Ç –∫–∞–∫ —á–µ—Ä–µ–∑ seed-—Ñ—Ä–∞–∑—É, —Ç–∞–∫ –∏ —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á.
"""

import os
import time
import json
from loguru import logger
from playwright.sync_api import Page
from typing import Optional, Dict, Any

def get_txt_line_by_profile_name(profile_name: str, file_path: str) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ —Ñ–∞–π–ª–∞ secrets.txt –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è
    
    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É secrets.txt
        
    Returns:
        Optional[str]: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                if line.strip().startswith(f"{profile_name}|"):
                    return line.strip()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
    return None

def is_twelve_words_string(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ seed-—Ñ—Ä–∞–∑–æ–π –∏–∑ 12 —Å–ª–æ–≤
    
    Args:
        text: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ —ç—Ç–æ seed-—Ñ—Ä–∞–∑–∞ –∏–∑ 12 —Å–ª–æ–≤, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    words = text.strip().split()
    return len(words) == 12 and all(word.isalpha() for word in words)

def run_rabby_import(profile_name: str, script_data_path: str, page: Page = None) -> bool:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–º–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞ Rabby Wallet –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    
    Args:
        profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è
        script_data_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
        page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ Playwright
        
    Returns:
        bool: True –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç Rabby Wallet –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile_name}")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_path = os.path.join(os.path.dirname(__file__), "..", "..", "chrome", "config", "rabby_config.json")
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ secrets.txt
        secrets_file_path = os.path.join(os.path.dirname(__file__), "..", "..", "..", "data", "secrets.txt")
        profile_data = get_txt_line_by_profile_name(profile_name, secrets_file_path)
        
        if not profile_data:
            logger.error("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–ª–∏ —Å–∏–¥ —Ñ—Ä–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
            
        profile_name, wallet_type, secret, password = profile_data.split('|')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Rabby
        if wallet_type.lower() != 'rabby':
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ—à–µ–ª—å–∫–∞: {wallet_type}, –æ–∂–∏–¥–∞–µ—Ç—Å—è: rabby")
            return False
            
        is_seed_phrase = is_twelve_words_string(secret)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        screenshots_dir = os.path.join(script_data_path, "screenshots")
        os.makedirs(screenshots_dir, exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
        if not page:
            logger.error("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞")
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        context = page.context
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è Rabby
        logger.info("ü¶ä –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è Rabby...")
        rabby_page = context.new_page()
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if config.get("run_delay_sec"):
            logger.info(f"‚è≥ –ñ–¥–µ–º {config['run_delay_sec']} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º...")
            time.sleep(config["run_delay_sec"])
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º Rabby
        rabby_url = f"chrome-extension://{config['extension_id']}/index.html#/new-user/guide"
        logger.info(f"üîó –û—Ç–∫—Ä—ã–≤–∞–µ–º Rabby –ø–æ URL: {rabby_url}")
        rabby_page.goto(rabby_url)
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        screenshot_path = os.path.join(screenshots_dir, f"rabby_start_{profile_name}.png")
        rabby_page.screenshot(path=screenshot_path)
        logger.info(f"üì∏ –°–¥–µ–ª–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {screenshot_path}")
        
        # –ù–∞–∂–∏–º–∞–µ–º "I already have an address"
        logger.info("üñ±Ô∏è –ù–∞–∂–∏–º–∞–µ–º 'I already have an address'...")
        import_btn = rabby_page.locator(config["selectors"]["import_address_button"])
        import_btn.wait_for(state="visible", timeout=config["timeouts"]["element"])
        import_btn.click()
        
        if is_seed_phrase:
            # –ò–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ seed-—Ñ—Ä–∞–∑—É
            logger.info("üîë –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ seed-—Ñ—Ä–∞–∑—É...")
            
            seed_btn = rabby_page.locator(config["selectors"]["seed_phrase_button"])
            seed_btn.wait_for(state="visible", timeout=config["timeouts"]["element"])
            seed_btn.click()
            
            # –í–≤–æ–¥–∏–º —Å–ª–æ–≤–∞ seed-—Ñ—Ä–∞–∑—ã
            words = secret.split()
            for i, word in enumerate(words, 1):
                word_input = rabby_page.locator(f"{config['selectors']['seed_phrase_inputs']} >> nth={i-1}")
                word_input.fill(word)
                logger.info(f"‚úçÔ∏è –í–≤–µ–¥–µ–Ω–æ —Å–ª–æ–≤–æ {i} –∏–∑ 12")
        else:
            # –ò–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
            logger.info("üîë –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á...")
            
            private_key_btn = rabby_page.locator(config["selectors"]["private_key_button"])
            private_key_btn.wait_for(state="visible", timeout=config["timeouts"]["element"])
            private_key_btn.click()
            
            # –í–≤–æ–¥–∏–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
            private_key_input = rabby_page.locator(config["selectors"]["private_key_input"])
            private_key_input.fill(secret)
        
        # –ù–∞–∂–∏–º–∞–µ–º Confirm
        confirm_btn = rabby_page.locator(config["selectors"]["confirm_button"])
        confirm_btn.wait_for(state="visible", timeout=config["timeouts"]["element"])
        confirm_btn.click()
        
        # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
        password_input = rabby_page.locator(config["selectors"]["password_input"])
        password_input.fill(password)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–∞—Ä–æ–ª—å
        confirm_password_input = rabby_page.locator(config["selectors"]["confirm_password_input"])
        confirm_password_input.fill(password)
        
        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
        confirm_import_btn = rabby_page.locator(config["selectors"]["confirm_button"])
        confirm_import_btn.wait_for(state="visible", timeout=config["timeouts"]["element"])
        confirm_import_btn.click()
        
        # –ï—Å–ª–∏ —ç—Ç–æ seed-—Ñ—Ä–∞–∑–∞, –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        if is_seed_phrase:
            import_selected_btn = rabby_page.locator(config["selectors"]["import_button"])
            import_selected_btn.wait_for(state="visible", timeout=config["timeouts"]["element"])
            import_selected_btn.click()
        
        # –î–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_path = os.path.join(screenshots_dir, f"rabby_final_{profile_name}.png")
        rabby_page.screenshot(path=screenshot_path)
        logger.info(f"üì∏ –°–¥–µ–ª–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_path}")
        
        logger.success(f"‚úÖ {profile_name} - Rabby Wallet —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ Rabby Wallet: {str(e)}")
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏
        try:
            screenshot_path = os.path.join(screenshots_dir, f"rabby_error_{profile_name}.png")
            rabby_page.screenshot(path=screenshot_path)
            logger.info(f"üì∏ –°–¥–µ–ª–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏: {screenshot_path}")
        except:
            pass
            
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∑–∞–ø—É—Å–∫–∞
def register_script(pw):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ Rabby Wallet –≤ —Å–∏—Å—Ç–µ–º–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
    
    Args:
        pw: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ PlaywrightChrome
    """
    pw.scripts["rabby_import"] = {
        "human_name": "–ò–º–ø–æ—Ä—Ç Rabby Wallet",
        "method": run_rabby_import
    } 