"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Chrome —á–µ—Ä–µ–∑ Playwright
"""
import os
import asyncio
import subprocess
from loguru import logger
from playwright.async_api import async_playwright, Page, BrowserContext
import socket
import time
import json
import shutil
from sys import platform
from typing import List, Optional

from src.utils.constants import (
    CHROME_DATA_PATH,
    CHROME_PATH,
    DEFAULT_EXTENSIONS_PATH
)

class AsyncPlaywrightAutomation:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ Chrome —á–µ—Ä–µ–∑ Playwright"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        self.playwright = None
        self.browser = None
        self.context = None
        self.chrome_process = None
        
    def _find_free_port(self) -> int:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç"""
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('', 0))
            s.listen(1)
            port = s.getsockname()[1]
        return port
        
    def _get_profile_extensions(self, profile_path: str) -> list[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è
        
        Args:
            profile_path: –ü—É—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—é
            
        Returns:
            list[str]: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
        """
        extensions = []
        extensions_path = os.path.join(profile_path, "Extensions")
        
        if os.path.exists(extensions_path):
            for ext_id in os.listdir(extensions_path):
                ext_path = os.path.join(extensions_path, ext_id)
                if os.path.isdir(ext_path):
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                    versions = sorted(os.listdir(ext_path))
                    if versions:
                        latest_version = versions[-1]
                        full_path = os.path.join(ext_path, latest_version)
                        logger.info(f"‚úì –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {ext_id} (–≤–µ—Ä—Å–∏—è {latest_version})")
                        extensions.append(full_path)
                        
        return extensions
        
    async def launch_profile(self, profile_name: str) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å Chrome
        
        Args:
            profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç–∏
            profile_path = os.path.join(CHROME_DATA_PATH, f"{profile_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            if not os.path.exists(profile_path):
                logger.error(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å {profile_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è
            extensions = self._get_profile_extensions(profile_path)
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            debug_port = self._find_free_port()
            
            # –î–ª—è macOS —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            if platform == "darwin":
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
                standalone_profile_path = os.path.join(os.path.dirname(CHROME_DATA_PATH), f"standalone_{profile_name}")
                os.makedirs(standalone_profile_path, exist_ok=True)
                
                # –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è, –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                if not os.listdir(standalone_profile_path) and os.path.exists(profile_path):
                    try:
                        # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                        for item in os.listdir(profile_path):
                            source = os.path.join(profile_path, item)
                            dest = os.path.join(standalone_profile_path, item)
                            if os.path.isdir(source):
                                try:
                                    shutil.copytree(source, dest, dirs_exist_ok=True)
                                except Exception as copy_err:
                                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {source}: {copy_err}")
                            else:
                                try:
                                    shutil.copy2(source, dest)
                                except Exception as copy_err:
                                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª {source}: {copy_err}")
                        logger.info(f'‚úÖ –°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è {profile_name}')
                    except Exception as e:
                        logger.error(f'‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}')
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data_dir = standalone_profile_path
                # –î–ª—è macOS –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ profile-directory
                profile_dir_flag = ""
                
                # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π app-id –¥–ª—è macOS
                unique_app_id = f"com.google.Chrome.profile{profile_name.replace(' ', '')}"
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –û–° –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é —Å—Ö–µ–º—É
                user_data_dir = CHROME_DATA_PATH
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –û–° –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ profile-directory
                profile_dir_flag = f"--profile-directory=Profile {profile_name}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞
            launch_args = [
                f"--user-data-dir={user_data_dir}",
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ profile-directory –¥–ª—è –Ω–µ-macOS
            if profile_dir_flag:
                launch_args.append(profile_dir_flag)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π app-id –¥–ª—è macOS
            if platform == "darwin" and "unique_app_id" in locals():
                launch_args.append(f"--app-id={unique_app_id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ñ–ª–∞–≥–∏
            launch_args.extend([
                f"--remote-debugging-port={debug_port}",
                "--no-first-run",
                "--no-default-browser-check",
                "--enable-extensions",
                "--make-default-browser=false",
                "--start-maximized",
                "--enable-automation",
                "--no-sandbox"
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
            for ext_path in extensions:
                launch_args.append(f"--load-extension={ext_path}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Chrome
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é Chrome –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile_name}...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Chrome –Ω–∞–ø—Ä—è–º—É—é
            self.chrome_process = subprocess.Popen(
                [CHROME_PATH, *launch_args],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            # –ñ–¥–µ–º –ø–æ–∫–∞ –ø–æ—Ä—Ç —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
            logger.info("‚è≥ –ñ–¥—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—Ä—Ç—É –æ—Ç–ª–∞–¥–∫–∏...")
            max_attempts = 10
            attempt = 0
            
            while attempt < max_attempts:
                try:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Chrome DevTools
                    self.playwright = await async_playwright().start()
                    self.browser = await self.playwright.chromium.connect_over_cdp(
                        f"http://localhost:{debug_port}"
                    )
                    
                    # –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ, –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    contexts = self.browser.contexts
                    if contexts:
                        self.context = contexts[0]
                        logger.success(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {profile_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                        return True
                    
                    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                    await self.browser.close()
                    await self.playwright.stop()
                    
                except Exception:
                    attempt += 1
                    await asyncio.sleep(1)
                    continue
                    
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Chrome DevTools")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {str(e)}")
            await self.close()
            return False
            
    async def run_script(self, script_function) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ Playwright
        
        Args:
            script_function: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω
        """
        try:
            if not self.context:
                raise Exception("–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
            return await script_function(self.context)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {str(e)}")
            return False
            
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            if self.chrome_process:
                self.chrome_process.terminate()
                await asyncio.sleep(1)
                try:
                    self.chrome_process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    self.chrome_process.kill()
            if self.browser:
                await self.browser.close()
            if self.playwright:
                await self.playwright.stop()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {str(e)}")

async def run_multiple_profiles(profile_names: list[str], script_function) -> list[bool]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö
    
    Args:
        profile_names: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø—Ä–æ—Ñ–∏–ª–µ–π
        script_function: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
    Returns:
        list[bool]: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    """
    try:
        results = []
        for profile_name in profile_names:
            automation = AsyncPlaywrightAutomation()
            try:
                if await automation.launch_profile(profile_name):
                    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile_name}")
                    result = await automation.run_script(script_function)
                    results.append(result)
                else:
                    results.append(False)
                    
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile_name}: {str(e)}")
                results.append(False)
                
        return results
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª–µ–π: {str(e)}")
        return [False] * len(profile_names) 