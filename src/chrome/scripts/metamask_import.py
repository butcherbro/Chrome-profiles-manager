#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞ MetaMask —á–µ—Ä–µ–∑ Playwright
"""

import time
import os
from loguru import logger
from playwright.sync_api import Page, expect, TimeoutError, BrowserContext
from src.utils.constants import METAMASK_ID
from src.chrome.scripts.test_extension import test_extension

def verify_metamask_extension(context: BrowserContext, check_extension: bool = True) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è MetaMask
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ Playwright
        check_extension: –§–ª–∞–≥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
    """
    try:
        # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
        if not check_extension:
            logger.info("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MetaMask...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_page = context.new_page()
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
            if test_extension(test_page, [METAMASK_ID]):
                test_page.close()
                return True
                
            test_page.close()
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: {str(e)}")
            test_page.close()
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ MetaMask: {str(e)}")
        return False

def metamask_import_wallet(context: BrowserContext, check_extension: bool = True) -> bool:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞ MetaMask
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ Playwright
        check_extension: –§–ª–∞–≥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        
    Returns:
        bool: True –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç
    """
    try:
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if not verify_metamask_extension(context, check_extension):
            return False
            
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∏–º–ø–æ—Ä—Ç—É
        logger.info("ü¶ä –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–º–ø–æ—Ä—Ç–∞ MetaMask...")
        metamask_page = context.new_page()
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            metamask_page.goto("about:blank", timeout=10000)
            time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
            
            # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–º–ø–æ—Ä—Ç–∞
            metamask_page.goto(
                f"chrome-extension://{METAMASK_ID}/home.html#onboarding/import-with-recovery-phrase",
                wait_until="load",
                timeout=10000
            )
            
            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫–æ—à–µ–ª–µ–∫
            try:
                account_menu = metamask_page.locator('[data-testid="account-menu-icon"]')
                if account_menu.is_visible(timeout=2000):
                    logger.info("‚úì MetaMask —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    metamask_page.close()
                    return True
            except TimeoutError:
                pass
            
            # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–º–ø–æ—Ä—Ç–∞
            try:
                import_title = metamask_page.get_by_text("Import with Secret Recovery Phrase")
                if import_title.is_visible(timeout=5000):
                    logger.success("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
                    
                    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–º–ø–æ—Ä—Ç–∞
                    os.makedirs("screenshots", exist_ok=True)
                    metamask_page.screenshot(path="screenshots/metamask_import.png")
                    
                    return True
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é, 
                    # –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å
                    logger.info("‚ö†Ô∏è –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å...")
                    metamask_page.goto(
                        f"chrome-extension://{METAMASK_ID}/home.html#onboarding/welcome",
                        wait_until="load",
                        timeout=10000
                    )
                    
                    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                    metamask_page.screenshot(path="screenshots/metamask_welcome.png")
                    
                    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    metamask_page.wait_for_load_state("networkidle", timeout=10000)
                    
                    # –ñ–¥–µ–º —á–µ–∫–±–æ–∫—Å –∏ –∫–ª–∏–∫–∞–µ–º
                    checkbox = metamask_page.locator('label[class="onboarding__terms-label"]')
                    if checkbox.is_visible(timeout=5000):
                        logger.info("‚úÖ –ß–µ–∫–±–æ–∫—Å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω")
                        checkbox.click()
                        time.sleep(1)
                        
                        # –ö–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–º–ø–æ—Ä—Ç–∞
                        import_button = metamask_page.locator("//button[contains(@data-testid,'onboarding-import-wallet')]")
                        if import_button.is_visible(timeout=5000):
                            logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞")
                            import_button.click()
                            time.sleep(1)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–∫—Ä—ã–ª–∞—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–º–ø–æ—Ä—Ç–∞
                            if import_title.is_visible(timeout=5000):
                                logger.success("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å")
                                
                                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–º–ø–æ—Ä—Ç–∞
                                metamask_page.screenshot(path="screenshots/metamask_import_alt.png")
                                
                                return True
                                
            except TimeoutError:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–º–ø–æ—Ä—Ç–∞")
                metamask_page.close()
                return False
            
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–º–ø–æ—Ä—Ç–∞")
            metamask_page.close()
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {str(e)}")
        return False

def fill_import_form(page: Page, seed_phrase: str, password: str) -> bool:
    """
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É –∏–º–ø–æ—Ä—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞ MetaMask
    
    Args:
        page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ Playwright —Å –æ—Ç–∫—Ä—ã—Ç–æ–π —Ñ–æ—Ä–º–æ–π –∏–º–ø–æ—Ä—Ç–∞
        seed_phrase: –°–∏–¥-—Ñ—Ä–∞–∑–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        password: –ü–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–º–ø–æ—Ä—Ç–∞
        import_title = page.get_by_text("Import with Secret Recovery Phrase")
        if not import_title.is_visible(timeout=5000):
            logger.error("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞")
            return False
            
        logger.info("üìù –ó–∞–ø–æ–ª–Ω—è—é —Ñ–æ—Ä–º—É –∏–º–ø–æ—Ä—Ç–∞...")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–∏–¥-—Ñ—Ä–∞–∑—É
        seed_input = page.locator("//input[@placeholder='Paste Secret Recovery Phrase from clipboard']")
        if seed_input.is_visible(timeout=5000):
            seed_input.fill(seed_phrase)
            logger.info("‚úÖ –°–∏–¥-—Ñ—Ä–∞–∑–∞ –≤–≤–µ–¥–µ–Ω–∞")
        else:
            logger.error("‚ùå –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–∏–¥-—Ñ—Ä–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
            
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
        password_input = page.locator("//input[@autocomplete='new-password']").first
        if password_input.is_visible(timeout=5000):
            password_input.fill(password)
            logger.info("‚úÖ –ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω")
        else:
            logger.error("‚ùå –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
            
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        confirm_password_input = page.locator("//input[@autocomplete='new-password']").nth(1)
        if confirm_password_input.is_visible(timeout=5000):
            confirm_password_input.fill(password)
            logger.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –≤–≤–µ–¥–µ–Ω–æ")
        else:
            logger.error("‚ùå –ü–æ–ª–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
            
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        terms_checkbox = page.locator("//div[contains(@class, 'check-box')]").first
        if terms_checkbox.is_visible(timeout=5000):
            terms_checkbox.click()
            logger.info("‚úÖ –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã")
        else:
            logger.error("‚ùå –ß–µ–∫–±–æ–∫—Å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–º–ø–æ—Ä—Ç–∞
        import_button = page.locator("//button[contains(@data-testid, 'import-srp-confirm')]")
        if import_button.is_visible(timeout=5000):
            import_button.click()
            logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞–∂–∞—Ç–∞")
        else:
            logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
        success_text = page.get_by_text("Congratulations")
        if success_text.is_visible(timeout=30000):
            logger.success("‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            os.makedirs("screenshots", exist_ok=True)
            page.screenshot(path="screenshots/metamask_import_success.png")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "All Done"
            all_done_button = page.locator("//button[contains(@data-testid, 'onboarding-complete-done')]")
            if all_done_button.is_visible(timeout=5000):
                all_done_button.click()
                logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ 'All Done' –Ω–∞–∂–∞—Ç–∞")
            
            return True
        else:
            logger.error("‚ùå –ò–º–ø–æ—Ä—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
        return False 