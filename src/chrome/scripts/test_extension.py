#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π Chrome —á–µ—Ä–µ–∑ Playwright
"""

import os
import time
from loguru import logger
from playwright.sync_api import Page, TimeoutError

def test_extension(page: Page, extension_ids: list[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    
    Args:
        page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ Playwright
        extension_ids: –°–ø–∏—Å–æ–∫ ID —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –≤—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã
    """
    results = {}
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page.goto("about:blank", timeout=10000)
        time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
        
        for ext_id in extension_ids:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ {ext_id}...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ URL –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            urls_to_try = [
                f"chrome-extension://{ext_id}/popup.html",
                f"chrome-extension://{ext_id}/index.html",
                f"chrome-extension://{ext_id}/home.html",
                f"chrome-extension://{ext_id}/home.html#welcome",
                f"chrome-extension://{ext_id}/home.html#unlock"
            ]
            
            success = False
            for url in urls_to_try:
                try:
                    page.goto(url, timeout=10000)
                    
                    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    page.wait_for_load_state("domcontentloaded", timeout=5000)
                    
                    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                    os.makedirs("screenshots", exist_ok=True)
                    page.screenshot(path=f"screenshots/extension_{ext_id}_{url.split('/')[-1].split('.')[0]}.png")
                    
                    logger.success(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ {ext_id} –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {url}")
                    success = True
                    break
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å {url}: {str(e)}")
                    continue
            
            if not success:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∏ –æ–¥–∏–Ω URL –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è {ext_id}")
                
            results[ext_id] = success
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                page.goto("about:blank", timeout=5000)
            except:
                pass
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π:")
        all_success = True
        for ext_id, success in results.items():
            status = "‚úÖ" if success else "‚ùå"
            logger.info(f"{status} {ext_id}")
            if not success:
                all_success = False
        
        return all_success
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: {str(e)}")
        return False

def test_metamask(page: Page) -> bool:
    """
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MetaMask
    
    Args:
        page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ Playwright
        
    Returns:
        bool: True –µ—Å–ª–∏ MetaMask –¥–æ—Å—Ç—É–ø–µ–Ω
    """
    from src.utils.constants import METAMASK_ID
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page.goto("about:blank", timeout=10000)
        time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ URL –¥–ª—è MetaMask
        urls_to_try = [
            f"chrome-extension://{METAMASK_ID}/home.html#welcome",
            f"chrome-extension://{METAMASK_ID}/home.html#unlock",
            f"chrome-extension://{METAMASK_ID}/home.html",
            f"chrome-extension://{METAMASK_ID}/popup.html"
        ]
        
        for url in urls_to_try:
            try:
                logger.info(f"ü¶ä –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å MetaMask —á–µ—Ä–µ–∑ {url}...")
                page.goto(url, timeout=10000)
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                page.wait_for_load_state("domcontentloaded", timeout=5000)
                
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                os.makedirs("screenshots", exist_ok=True)
                page.screenshot(path=f"screenshots/metamask_{url.split('/')[-1].split('.')[0].split('#')[-1]}.png")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ MetaMask
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –∏–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    logo = page.locator("img[alt='MetaMask']")
                    if logo.is_visible(timeout=2000):
                        logger.success(f"‚úÖ MetaMask –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {url}")
                        return True
                except:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
                    if "MetaMask" in page.content():
                        logger.success(f"‚úÖ MetaMask –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {url}")
                        return True
                    else:
                        logger.debug(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã–ª–∞—Å—å, –Ω–æ –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ MetaMask")
                        continue
                
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å {url}: {str(e)}")
                continue
        
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∏ –æ–¥–∏–Ω URL –¥–ª—è MetaMask")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ MetaMask: {str(e)}")
        return False 