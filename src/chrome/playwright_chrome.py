"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ Chrome —á–µ—Ä–µ–∑ Playwright

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞—Å—Å PlaywrightChrome, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å
–ø—Ä–æ—Ñ–∏–ª—è–º–∏ Chrome —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Playwright –≤–º–µ—Å—Ç–æ Selenium.
"""

import os
import time
import subprocess
import json
from pathlib import Path

from playwright.sync_api import sync_playwright, Page, Browser, BrowserContext, TimeoutError as PlaywrightTimeoutError
from loguru import logger
import requests

from src.utils.helpers import set_comments_for_profiles, get_profiles_list, kill_chrome_processes
from src.utils.constants import *


class PlaywrightChrome:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ Chrome —á–µ—Ä–µ–∑ Playwright
    
    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª—è—Ö Chrome —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Playwright.
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ PlaywrightChrome
        """
        self.debug_ports = {}
        self.chosen_debug_ports = []
        self.playwright = None
        self.browser = None
        self.context = None
        self.page = None
        self.chrome_process = None
        
        # –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
        self.scripts = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_path = os.path.join(os.path.dirname(__file__), "config", "chrome_launch_config.json")
        with open(config_path, 'r', encoding='utf-8') as f:
            self.config = json.load(f)
        
    def get_profiles(self) -> list[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π Chrome
        
        Returns:
            list[str]: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø—Ä–æ—Ñ–∏–ª–µ–π
        """
        return get_profiles_list()
    
    def create_new_profile(self, profile_name: str) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å Chrome
        
        Args:
            profile_name: –ò–º—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        """
        try:
            profile_path = self.__get_profile_path(profile_name)
            profile_extensions_path = os.path.join(profile_path, "Extensions")

            os.makedirs(profile_path)  # –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å FileExistsError
            os.makedirs(profile_extensions_path, exist_ok=True)

            set_comments_for_profiles(profile_name, "")  # —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

            logger.info(f'‚úÖ  {profile_name} - –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω')
        except FileExistsError:
            logger.warning(f'‚ö†Ô∏è {profile_name} - –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        except Exception as e:
            logger.error(f'‚õî  {profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
            logger.debug(f'{profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –ø—Ä–∏—á–∏–Ω–∞: {e}')
    
    def launch_profile(self, profile_name, headless=False, debug_port=None, timeout=None):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å Chrome —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Playwright
        
        Args:
            profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            headless: –ó–∞–ø—É—Å–∫–∞—Ç—å –ª–∏ –≤ –±–µ–∑–≥–æ–ª–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            debug_port: –ü–æ—Ä—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–µ—Å–ª–∏ None, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ—Ä—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
            timeout: –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Chrome (–µ—Å–ª–∏ None, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–∞–π–º–∞—É—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω, –∏–Ω–∞—á–µ False
        """
        try:
            # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            logger.info(f"üî´ {profile_name} - —É–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome...")
            kill_chrome_processes()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—é
            if profile_name.isdigit():
                profile_dir = f"Profile {profile_name}"
            else:
                profile_dir = profile_name
                
            profile_path = os.path.join(CHROME_DATA_PATH, profile_dir)
            logger.info(f"üìÇ {profile_name} - –ø—É—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—é: {profile_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            if not os.path.exists(profile_path):
                logger.error(f"‚ùå {profile_name} - –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {profile_path}")
                return False
                
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
            profile_extensions = []
            extensions_path = os.path.join(profile_path, "Extensions")
            
            if os.path.exists(extensions_path):
                for ext_id in os.listdir(extensions_path):
                    ext_path = os.path.join(extensions_path, ext_id)
                    if os.path.isdir(ext_path):
                        for version in os.listdir(ext_path):
                            version_path = os.path.join(ext_path, version)
                            if os.path.isdir(version_path):
                                logger.info(f"üì¶ {profile_name} - –Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ {ext_id} –≤–µ—Ä—Å–∏–∏ {version}")
                                profile_extensions.append(f"{version_path}")
                                break
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Chrome
            logger.info(f"üöÄ {profile_name} - –∑–∞–ø—É—Å–∫–∞–µ–º Chrome...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            if debug_port is None:
                debug_port = self.config.get("debug_port", 9222)
                
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∞—É—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            if timeout is None:
                timeout = self.config.get("timeouts", {}).get("chrome_startup", 30)
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞
            launch_args = [
                CHROME_PATH,
                f"--user-data-dir={CHROME_DATA_PATH}",
                f"--profile-directory={profile_dir}",
                f"--remote-debugging-port={debug_port}",
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            for flag in self.config.get("launch_flags", {}).get("required", []):
                if flag == "--user-data-dir={CHROME_DATA_PATH}":
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏
                if flag == "--profile-directory=Profile {profile_name}":
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏
                if flag == "--remote-debugging-port={debug_port}":
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏
                # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–∞—Ö
                flag = flag.replace("{CHROME_DATA_PATH}", str(CHROME_DATA_PATH))
                flag = flag.replace("{profile_name}", str(profile_name))
                flag = flag.replace("{debug_port}", str(debug_port))
                launch_args.append(flag)
                
            logger.info(f"üîå {profile_name} - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ—Ä—Ç {debug_port} –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if profile_extensions:
                extensions_arg = ",".join(profile_extensions)
                launch_args.append(f"--load-extension={extensions_arg}")
                
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            for flag_name, flag_value in self.config.get("launch_flags", {}).get("optional", {}).items():
                if flag_name == "headless" and not headless:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–ª–∞–≥ --headless, –µ—Å–ª–∏ headless=False
                # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–∞—Ö
                flag_value = flag_value.replace("{CHROME_DATA_PATH}", str(CHROME_DATA_PATH))
                flag_value = flag_value.replace("{profile_name}", str(profile_name))
                flag_value = flag_value.replace("{debug_port}", str(debug_port))
                launch_args.append(flag_value)
            
            # –í—ã–≤–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ Chrome: {' '.join(launch_args)}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Chrome
            self.chrome_process = subprocess.Popen(
                launch_args,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            logger.info(f"‚úÖ {profile_name} - –ø—Ä–æ—Ü–µ—Å—Å Chrome –∑–∞–ø—É—â–µ–Ω —Å PID: {self.chrome_process.pid}")
            
            # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Chrome
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üîç {profile_name} - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ –æ—Ç–ª–∞–¥–∫–∏ {debug_port}...")
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Chrome DevTools
            debug_url = self.config.get("debug_endpoint", f"http://localhost:{debug_port}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ –æ—Ç–ª–∞–¥–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            max_attempts = 30
            for attempt in range(1, max_attempts + 1):
                try:
                    logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {debug_url}/json/version")
                    response = requests.get(f"{debug_url}/json/version", timeout=1)
                    if response.status_code == 200:
                        logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç Chrome DevTools: {response.json()}")
                        logger.info(f"‚úÖ {profile_name} - –ø–æ—Ä—Ç –æ—Ç–ª–∞–¥–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
                        break
                except requests.exceptions.RequestException:
                    if attempt == max_attempts:
                        logger.error(f"‚ùå {profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–æ—Ä—Ç—É –æ—Ç–ª–∞–¥–∫–∏ –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
                        return False
                    time.sleep(1)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Chrome —á–µ—Ä–µ–∑ CDP
            try:
                logger.info(f"üîå {profile_name} - –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Chrome —á–µ—Ä–µ–∑ CDP...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º Playwright
                self.playwright = sync_playwright().start()
                
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É Chrome —á–µ—Ä–µ–∑ CDP
                self.browser = self.playwright.chromium.connect_over_cdp(debug_url)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                logger.debug(f"–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–∞—É–∑–µ—Ä–æ–≤: {debug_url}/json/list")
                response = requests.get(f"{debug_url}/json/list")
                logger.debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã: {response.json()}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞
                contexts = self.browser.contexts
                if not contexts:
                    logger.error(f"‚ùå {profile_name} - –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞")
                    return False
                    
                self.context = contexts[0]
                logger.info(f"‚úÖ {profile_name} - –ø–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                if self.context.pages:
                    self.page = self.context.pages[0]
                    logger.info(f"‚úÖ {profile_name} - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                else:
                    self.page = self.context.new_page()
                    logger.info(f"‚úÖ {profile_name} - —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–º–µ–Ω–µ–º –ø—Ä–æ—Ñ–∏–ª—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                try:
                    # –°–æ–∑–¥–∞–µ–º HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–º–µ–Ω–µ–º –ø—Ä–æ—Ñ–∏–ª—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                    html_content = f"""
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>{profile_name}</title>
                        <style>
                            body {{
                                font-family: Arial, sans-serif;
                                background: linear-gradient(135deg, #1e2a38, #3a414a);
                                color: #f0f0f0;
                                margin: 0;
                                padding: 0;
                                display: flex;
                                justify-content: center;
                                align-items: center;
                                height: 100vh;
                                overflow: hidden;
                            }}
                            .profile-info {{
                                background: rgba(255, 255, 255, 0.1);
                                padding: 30px;
                                border-radius: 10px;
                                text-align: center;
                                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
                            }}
                            h1 {{
                                font-size: 2.5em;
                                margin-bottom: 10px;
                                color: #ffcc00;
                            }}
                            p {{
                                font-size: 1.2em;
                                color: #ddd;
                            }}
                        </style>
                    </head>
                    <body>
                        <div class="profile-info">
                            <h1>{profile_name}</h1>
                            <p>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å Chrome</p>
                        </div>
                    </body>
                    </html>
                    """
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —ç—Ç–∏–º HTML-—Å–æ–¥–µ—Ä–∂–∏–º—ã–º –≤ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞
                    try:
                        # –ñ–¥–µ–º, –ø–æ–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
                        self.page.wait_for_load_state("domcontentloaded", timeout=5000)
                        
                        # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
                        self.page.set_content(html_content)
                        logger.info(f"‚úÖ {profile_name} - –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ –≤ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è {profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏: {str(e)}")
                        
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∑–∞—Ç–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                        try:
                            self.page.goto("about:blank", timeout=5000)
                            self.page.set_content(html_content)
                            logger.info(f"‚úÖ {profile_name} - –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ about:blank")
                        except Exception as e2:
                            logger.error(f"‚ùå {profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ about:blank: {str(e2)}")
                            
                            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
                            try:
                                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É
                                self.page.close()
                                
                                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
                                self.page = self.context.new_page()
                                self.page.set_content(html_content)
                                logger.info(f"‚úÖ {profile_name} - –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ")
                            except Exception as e3:
                                logger.error(f"‚ùå {profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ: {str(e3)}")
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏, –∫—Ä–æ–º–µ –Ω–∞—à–µ–π –∏ –≤–∫–ª–∞–¥–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
                        all_pages = self.context.pages
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ Chrome (New Tab, –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ç.–¥.)
                        for page in all_pages:
                            if page != self.page:
                                try:
                                    # –ü–æ–ª—É—á–∞–µ–º URL –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                                    page_url = page.url
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –≤–∫–ª–∞–¥–∫–æ–π Chrome
                                    # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π (chrome-extension://)
                                    if (page_url.startswith("chrome://") or 
                                        page_url.startswith("about:") or 
                                        "new-tab-page" in page_url or 
                                        page_url == "about:blank"):
                                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                                        page.close()
                                        logger.debug(f"üîí {profile_name} - –∑–∞–∫—Ä—ã—Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞: {page_url}")
                                except Exception as e:
                                    logger.warning(f"‚ö†Ô∏è {profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É: {str(e)}")
                        
                        logger.info(f"‚úÖ {profile_name} - –∑–∞–∫—Ä—ã—Ç—ã –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ Chrome")
                    except Exception as e:
                        logger.error(f"‚ùå {profile_name} - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ª–∏—à–Ω–∏—Ö –≤–∫–ª–∞–¥–æ–∫: {str(e)}")
                    
                    logger.success(f"‚úÖ {profile_name} - –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                    return True
                    
                except Exception as e:
                    logger.error(f"‚ùå {profile_name} - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ: {str(e)}")
                
                logger.success(f"‚úÖ {profile_name} - –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå {profile_name} - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Chrome —á–µ—Ä–µ–∑ CDP: {str(e)}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå {profile_name} - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
            return False
    
    def run_scripts(self, profile_name: str, scripts_list: list[str], headless: bool = False) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è Chrome
        
        Args:
            profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è
            scripts_list: –°–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            headless: –ó–∞–ø—É—Å–∫–∞—Ç—å –ª–∏ –±—Ä–∞—É–∑–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        """
        try:
            browser = self.launch_profile(profile_name, headless)
            if not browser:
                raise Exception('–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä')
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            context = browser.contexts[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            page = context.pages[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            
            logger.debug(f'{profile_name} - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
            
            logger.debug(f'{profile_name} - —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –ø—Ä–æ–≥–æ–Ω–∞: {scripts_list}')
            for script in scripts_list:
                try:
                    human_name = self.scripts[script]['human_name']
                    logger.info(f'‚ÑπÔ∏è {profile_name} - –∑–∞–ø—É—Å–∫–∞—é —Å–∫—Ä–∏–ø—Ç "{human_name}"')
                    script_data_path = os.path.join(DATA_PATH, 'scripts', "playwright", script)
                    self.scripts[script]['method'](
                        profile_name,
                        script_data_path,
                        page
                    )
                    logger.info(f'‚úÖ  {profile_name} - —Å–∫—Ä–∏–ø—Ç "{human_name}" –≤—ã–ø–æ–ª–Ω–µ–Ω')
                except Exception as e:
                    human_name = self.scripts[script]['human_name']
                    logger.error(f'‚õî  {profile_name} - —Å–∫—Ä–∏–ø—Ç "{human_name}" –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π')
                    logger.debug(f'{profile_name} - —Å–∫—Ä–∏–ø—Ç "{human_name}" –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π, –ø—Ä–∏—á–∏–Ω–∞: {e}')
            
        except Exception as e:
            logger.error(f'‚õî  {profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–æ')
            logger.debug(f'{profile_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –ø—Ä–∏—á–∏–Ω–∞: {e}')
            return
        
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∏ playwright
            if self.browser:
                self.browser.close()
            if self.playwright:
                self.playwright.stop()
            logger.debug(f'{profile_name} - –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç')
    
    def close(self) -> None:
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
        """
        try:
            if self.browser:
                self.browser.close()
                self.browser = None
                
            if self.playwright:
                self.playwright.stop()
                self.playwright = None
                
            if self.chrome_process:
                try:
                    self.chrome_process.terminate()
                    self.chrome_process.wait(timeout=5)
                except:
                    try:
                        self.chrome_process.kill()
                    except:
                        pass
                self.chrome_process = None
                
            logger.info("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.error(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {str(e)}")
    
    def __find_free_port(self, start_port: int, end_port: int) -> int:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        
        Args:
            start_port: –ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            end_port: –ö–æ–Ω–µ—á–Ω—ã–π –ø–æ—Ä—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            
        Returns:
            int: –°–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        import socket
        
        for port in range(start_port, end_port + 1):
            if port in self.chosen_debug_ports:
                continue
                
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                try:
                    s.bind(('localhost', port))
                    self.chosen_debug_ports.append(port)
                    return port
                except:
                    continue
        
        return None
    
    def __get_profile_path(self, profile_name: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—é Chrome
        
        Args:
            profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è
            
        Returns:
            str: –ü—É—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—é
        """
        return os.path.join(CHROME_DATA_PATH, f"Profile {profile_name}") 